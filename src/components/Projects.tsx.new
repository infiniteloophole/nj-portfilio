import React, { useState, useEffect, useMemo, useCallback, lazy, Suspense } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Loader2, AlertCircle, Code, ExternalLink, Github, ChevronLeft, ChevronRight } from 'lucide-react';
import { Project } from '../types/project';

// Lazy load components for better performance
const ProjectCard = lazy(() => import('./ProjectCard'));
const ProjectFilters = lazy(() => import('./ProjectFilters'));

// Types
type SortOption = 'newest' | 'oldest' | 'name-asc' | 'name-desc';

interface FilterState {
  category: string;
  search: string;
  sort: SortOption;
  page: number;
  pageSize: number;
}

// Animation variants
const containerVariants = {
  hidden: { opacity: 0 },
  visible: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1,
      delayChildren: 0.2,
    },
  },
};

const itemVariants = {
  hidden: { y: 20, opacity: 0 },
  visible: {
    y: 0,
    opacity: 1,
    transition: {
      type: 'spring',
      stiffness: 100,
      damping: 15,
    },
  },
};

// Simple mapping of technology names to icons
const techIcons: Record<string, JSX.Element> = {
  // Frontend
  'react': <Code className="w-4 h-4" aria-hidden="true" />,
  'nextjs': <Code className="w-4 h-4" aria-hidden="true" />,
  'typescript': <Code className="w-4 h-4" aria-hidden="true" />,
  'javascript': <Code className="w-4 h-4" aria-hidden="true" />,
  'tailwind': <Code className="w-4 h-4" aria-hidden="true" />,
  'html': <Code className="w-4 h-4" aria-hidden="true" />,
  'css': <Code className="w-4 h-4" aria-hidden="true" />,
  // Add more tech icons as needed
};

// Get the appropriate icon for a technology with fallback
export const getTechIcon = (tech: string): JSX.Element => {
  if (!tech) return <Code className="w-4 h-4" aria-hidden="true" />;
  return techIcons[tech.toLowerCase()] || <Code className="w-4 h-4" aria-hidden="true" />;
};

// Get the appropriate color for a technology
export const getTechColor = (tech: string): string => {
  const colorMap: Record<string, string> = {
    // Frontend
    'react': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',
    'nextjs': 'bg-black text-white dark:bg-white dark:text-black',
    'typescript': 'bg-blue-600 text-white dark:bg-blue-900 dark:text-blue-100',
    'javascript': 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',
    'tailwind': 'bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-200',
    'html': 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200',
    'css': 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200',
    // Add more tech colors as needed
  };
  return colorMap[tech.toLowerCase()] || 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200';
};

// Error Boundary Component
class ErrorBoundary extends React.Component<{ children: React.ReactNode }, { hasError: boolean; error?: Error }> {
  constructor(props: { children: React.ReactNode }) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by error boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="p-4 bg-red-50 dark:bg-red-900/20 rounded-lg text-red-800 dark:text-red-200">
          <div className="flex items-center">
            <AlertCircle className="w-5 h-5 mr-2" />
            <h3 className="font-medium">Something went wrong</h3>
          </div>
          {this.state.error && (
            <p className="mt-2 text-sm">{this.state.error.message}</p>
          )}
          <button
            onClick={() => this.setState({ hasError: false })}
            className="mt-3 text-sm font-medium text-red-700 hover:text-red-900 dark:text-red-300 dark:hover:text-red-100"
          >
            Try again
          </button>
        </div>
      );
    }

    return this.props.children;
  }
}

const Projects: React.FC = () => {
  const [projects, setProjects] = useState<Project[]>([]);
  const [filteredProjects, setFilteredProjects] = useState<Project[]>([]);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [filters, setFilters] = useState<FilterState>({
    category: 'all',
    search: '',
    sort: 'newest',
    page: 1,
    pageSize: 9,
  });

  // Handle window resize for mobile detection
  const [isMobile, setIsMobile] = useState<boolean>(false);
  
  useEffect(() => {
    const checkIfMobile = () => {
      setIsMobile(window.innerWidth < 768);
    };
    
    checkIfMobile();
    window.addEventListener('resize', checkIfMobile);
    return () => window.removeEventListener('resize', checkIfMobile);
  }, []);

  // Fetch projects
  useEffect(() => {
    const fetchProjects = async () => {
      try {
        setLoading(true);
        // In a real app, you would fetch from an API
        // const response = await fetch('/api/projects');
        // const data = await response.json();
        // setProjects(data);
        
        // For now, using the imported projects data
        const { default: projectsData } = await import('../data/projects');
        setProjects(projectsData);
        setFilteredProjects(projectsData);
      } catch (err) {
        console.error('Error fetching projects:', err);
        setError('Failed to load projects. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchProjects();
  }, []);

  // Apply filters and sorting
  useEffect(() => {
    if (!projects.length) return;
    
    let result = [...projects];
    
    // Apply category filter
    if (filters.category !== 'all') {
      result = result.filter(project => 
        project.type === filters.category ||
        project.technologies.some(tech => tech.toLowerCase() === filters.category.toLowerCase())
      );
    }
    
    // Apply search query
    if (filters.search) {
      const searchLower = filters.search.toLowerCase();
      result = result.filter(project => 
        project.title.toLowerCase().includes(searchLower) ||
        project.description.toLowerCase().includes(searchLower) ||
        project.technologies.some(tech => tech.toLowerCase().includes(searchLower)) ||
        (project.longDescription && project.longDescription.toLowerCase().includes(searchLower))
      );
    }
    
    // Apply sorting
    result.sort((a, b) => {
      switch (filters.sort) {
        case 'newest':
          return new Date(b.year).getTime() - new Date(a.year).getTime();
        case 'oldest':
          return new Date(a.year).getTime() - new Date(b.year).getTime();
        case 'name-asc':
          return a.title.localeCompare(b.title);
        case 'name-desc':
          return b.title.localeCompare(a.title);
        default:
          return 0;
      }
    });
    
    setFilteredProjects(result);
  }, [projects, filters]);

  // Handle filter changes
  const handleCategoryChange = useCallback((category: string) => {
    setFilters(prev => ({
      ...prev,
      category,
      page: 1, // Reset to first page when filters change
    }));
  }, []);
  
  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    setFilters(prev => ({
      ...prev,
      search: e.target.value,
      page: 1, // Reset to first page when search changes
    }));
  }, []);
  
  const handleSortChange = useCallback((e: React.ChangeEvent<HTMLSelectElement>) => {
    setFilters(prev => ({
      ...prev,
      sort: e.target.value as SortOption,
    }));
  }, []);
  
  const handleClearFilters = useCallback(() => {
    setFilters({
      category: 'all',
      search: '',
      sort: 'newest',
      page: 1,
      pageSize: 9,
    });
  }, []);
  
  // Toggle project expansion
  const [expandedProject, setExpandedProject] = useState<number | null>(null);
  const toggleExpandProject = useCallback((projectId: number) => {
    setExpandedProject(prev => (prev === projectId ? null : projectId));
  }, []);
  
  // Generate filter options with counts
  const filterOptions = useMemo(() => {
    const categories = [
      { id: 'all', name: 'All Projects', icon: <Code className="w-4 h-4" /> },
      { id: 'web', name: 'Web Apps', icon: <Code className="w-4 h-4" /> },
      { id: 'mobile', name: 'Mobile Apps', icon: <Code className="w-4 h-4" /> },
      { id: 'ai', name: 'AI/ML', icon: <Code className="w-4 h-4" /> },
      { id: 'data', name: 'Data Analytics', icon: <Code className="w-4 h-4" /> },
    ];
    
    return categories.map(category => ({
      ...category,
      count: category.id === 'all' 
        ? projects.length 
        : projects.filter(p => 
            p.type === category.id || 
            p.technologies.some(tech => tech.toLowerCase() === category.id.toLowerCase())
          ).length
    }));
  }, [projects]);
  
  // Calculate pagination
  const totalPages = Math.ceil(filteredProjects.length / filters.pageSize);
  const paginatedProjects = useMemo(() => {
    const startIndex = (filters.page - 1) * filters.pageSize;
    return filteredProjects.slice(startIndex, startIndex + filters.pageSize);
  }, [filteredProjects, filters.page, filters.pageSize]);
  
  // Handle page change
  const handlePageChange = useCallback((page: number) => {
    setFilters(prev => ({
      ...prev,
      page,
    }));
    
    // Scroll to top when changing pages
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }, []);

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-12">
          <motion.h1 
            className="text-4xl font-extrabold text-gray-900 dark:text-white sm:text-5xl sm:tracking-tight lg:text-6xl"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
          >
            My Projects
          </motion.h1>
          <motion.p 
            className="mt-5 max-w-xl mx-auto text-xl text-gray-500 dark:text-gray-400"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5, delay: 0.1 }}
          >
            A collection of my recent work and side projects
          </motion.p>
        </div>

        <ErrorBoundary>
          <Suspense fallback={
            <div className="flex justify-center items-center h-64">
              <Loader2 className="animate-spin h-8 w-8 text-blue-500" />
            </div>
          }>
            <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
              {/* Filters Sidebar */}
              <div className="lg:col-span-1">
                <ProjectFilters
                  filters={filterOptions}
                  activeFilter={filters.category}
                  onFilterChange={handleCategoryChange}
                  onClearFilters={handleClearFilters}
                />
              </div>
              
              {/* Projects Grid */}
              <div className="lg:col-span-3">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 gap-4">
                  {/* Search Input */}
                  <div className="relative w-full sm:max-w-md">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <svg className="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fillRule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <input
                      type="text"
                      className="block w-full pl-10 pr-3 py-2 border border-gray-300 dark:border-gray-700 rounded-md leading-5 bg-white dark:bg-gray-800 placeholder-gray-500 dark:placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                      placeholder="Search projects..."
                      value={filters.search}
                      onChange={handleSearchChange}
                      aria-label="Search projects"
                    />
                  </div>
                  
                  {/* Sort Dropdown */}
                  <div className="flex items-center">
                    <label htmlFor="sort" className="mr-2 text-sm font-medium text-gray-700 dark:text-gray-300">
                      Sort by:
                    </label>
                    <select
                      id="sort"
                      className="block w-full pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-white"
                      value={filters.sort}
                      onChange={handleSortChange}
                    >
                      <option value="newest">Newest First</option>
                      <option value="oldest">Oldest First</option>
                      <option value="name-asc">Name (A-Z)</option>
                      <option value="name-desc">Name (Z-A)</option>
                    </select>
                  </div>
                </div>
                
                {/* Loading State */}
                {loading ? (
                  <div className="flex justify-center items-center h-64">
                    <Loader2 className="animate-spin h-8 w-8 text-blue-500" />
                  </div>
                ) : error ? (
                /* Error State */
                  <div className="text-center py-12">
                    <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-red-100 dark:bg-red-900/30">
                      <AlertCircle className="h-6 w-6 text-red-600 dark:text-red-400" />
                    </div>
                    <h3 className="mt-3 text-lg font-medium text-gray-900 dark:text-white">Error loading projects</h3>
                    <p className="mt-2 text-sm text-gray-500 dark:text-gray-400">{error}</p>
                    <div className="mt-6">
                      <button
                        onClick={() => window.location.reload()}
                        className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                      >
                        Try again
                      </button>
                    </div>
                  </div>
                ) : filteredProjects.length === 0 ? (
                /* No Results State */
                  <div className="text-center py-12">
                    <svg
                      className="mx-auto h-12 w-12 text-gray-400"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                      aria-hidden="true"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                      />
                    </svg>
                    <h3 className="mt-2 text-lg font-medium text-gray-900 dark:text-white">No projects found</h3>
                    <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                      {filters.search || filters.category !== 'all' 
                        ? 'Try adjusting your search or filter to find what you\'re looking for.'
                        : 'There are no projects to display at the moment. Please check back later.'}
                    </p>
                    {(filters.search || filters.category !== 'all') && (
                      <div className="mt-6">
                        <button
                          type="button"
                          onClick={handleClearFilters}
                          className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                        >
                          Clear all filters
                        </button>
                      </div>
                    )}
                  </div>
                ) : (
                /* Projects Grid */
                  <>
                    <div className="mb-4 text-sm text-gray-500 dark:text-gray-400">
                      Showing <span className="font-medium">{(filters.page - 1) * filters.pageSize + 1}</span> to{' '}
                      <span className="font-medium">
                        {Math.min(filters.page * filters.pageSize, filteredProjects.length)}
                      </span>{' '}
                      of <span className="font-medium">{filteredProjects.length}</span> projects
                    </div>
                    
                    <motion.div
                      variants={containerVariants}
                      initial="hidden"
                      animate="visible"
                      className="grid gap-6 sm:grid-cols-1 lg:grid-cols-2 xl:grid-cols-2"
                    >
                      <AnimatePresence>
                        {paginatedProjects.map((project) => (
                          <motion.div
                            key={project.id}
                            variants={itemVariants}
                            layoutId={`project-${project.id}`}
                            className="flex"
                          >
                            <ProjectCard
                              project={project}
                              isExpanded={expandedProject === project.id}
                              onToggleExpand={() => toggleExpandProject(project.id)}
                              onKeyDown={(e: React.KeyboardEvent) => {
                                if (e.key === 'Enter' || e.key === ' ') {
                                  e.preventDefault();
                                  toggleExpandProject(project.id);
                                } else if (e.key === 'Escape' && expandedProject === project.id) {
                                  e.preventDefault();
                                  toggleExpandProject(project.id);
                                }
                              }}
                            />
                          </motion.div>
                        ))}
                      </AnimatePresence>
                    </motion.div>
                    
                    {/* Pagination */}
                    {totalPages > 1 && (
                      <div className="mt-8 flex items-center justify-between">
                        <div className="flex-1 flex justify-between sm:hidden">
                          <button
                            onClick={() => handlePageChange(Math.max(1, filters.page - 1))}
                            disabled={filters.page === 1}
                            className={`relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-700 text-sm font-medium rounded-md ${
                              filters.page === 1
                                ? 'bg-gray-100 dark:bg-gray-800 text-gray-400 dark:text-gray-600 cursor-not-allowed'
                                : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
                            }`}
                          >
                            Previous
                          </button>
                          <button
                            onClick={() => handlePageChange(Math.min(totalPages, filters.page + 1))}
                            disabled={filters.page === totalPages}
                            className={`ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-700 text-sm font-medium rounded-md ${
                              filters.page === totalPages
                                ? 'bg-gray-100 dark:bg-gray-800 text-gray-400 dark:text-gray-600 cursor-not-allowed'
                                : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'
                            }`}
                          >
                            Next
                          </button>
                        </div>
                        <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                          <div>
                            <p className="text-sm text-gray-700 dark:text-gray-300">
                              Showing <span className="font-medium">{(filters.page - 1) * filters.pageSize + 1}</span> to{' '}
                              <span className="font-medium">
                                {Math.min(filters.page * filters.pageSize, filteredProjects.length)}
                              </span>{' '}
                              of <span className="font-medium">{filteredProjects.length}</span> results
                            </p>
                          </div>
                          <div>
                            <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                              <button
                                onClick={() => handlePageChange(Math.max(1, filters.page - 1))}
                                disabled={filters.page === 1}
                                className={`relative inline-flex items-center px-2 py-2 rounded-l-md border ${
                                  filters.page === 1
                                    ? 'bg-gray-100 dark:bg-gray-800 border-gray-300 dark:border-gray-700 text-gray-400 dark:text-gray-600 cursor-not-allowed'
                                    : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-700 text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700'
                                }`}
                                aria-label="Previous"
                              >
                                <span className="sr-only">Previous</span>
                                <ChevronLeft className="h-5 w-5" aria-hidden="true" />
                              </button>
                              
                              {/* Page numbers */}
                              {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                                // Show first page, last page, current page, and pages around current page
                                let pageNum;
                                if (totalPages <= 5) {
                                  pageNum = i + 1;
                                } else if (filters.page <= 3) {
                                  pageNum = i + 1;
                                } else if (filters.page >= totalPages - 2) {
                                  pageNum = totalPages - 4 + i;
                                } else {
                                  pageNum = filters.page - 2 + i;
                                }
                                
                                return (
                                  <button
                                    key={pageNum}
                                    onClick={() => handlePageChange(pageNum)}
                                    className={`relative inline-flex items-center px-4 py-2 border ${
                                      filters.page === pageNum
                                        ? 'z-10 bg-blue-50 dark:bg-blue-900/30 border-blue-500 text-blue-600 dark:text-blue-300'
                                        : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-700 text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700'
                                    }`}
                                  >
                                    {pageNum}
                                  </button>
                                );
                              })}
                              
                              <button
                                onClick={() => handlePageChange(Math.min(totalPages, filters.page + 1))}
                                disabled={filters.page === totalPages}
                                className={`relative inline-flex items-center px-2 py-2 rounded-r-md border ${
                                  filters.page === totalPages
                                    ? 'bg-gray-100 dark:bg-gray-800 border-gray-300 dark:border-gray-700 text-gray-400 dark:text-gray-600 cursor-not-allowed'
                                    : 'bg-white dark:bg-gray-800 border-gray-300 dark:border-gray-700 text-gray-500 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700'
                                }`}
                                aria-label="Next"
                              >
                                <span className="sr-only">Next</span>
                                <ChevronRight className="h-5 w-5" aria-hidden="true" />
                              </button>
                            </nav>
                          </div>
                        </div>
                      </div>
                    )}
                  </>
                )}
              </div>
            </div>
          </Suspense>
        </ErrorBoundary>
      </div>
    </div>
  );
};

export default Projects;
